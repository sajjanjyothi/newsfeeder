// Package newsfeeder provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package newsfeeder

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// UpdatenewsurlJSONBody defines parameters for Updatenewsurl.
type UpdatenewsurlJSONBody struct {
	Category *string `json:"category,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// UpdatenewsurlJSONRequestBody defines body for Updatenewsurl for application/json ContentType.
type UpdatenewsurlJSONRequestBody UpdatenewsurlJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Updatenewsurl request with any body
	UpdatenewsurlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updatenewsurl(ctx context.Context, body UpdatenewsurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Geturls request
	Geturls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getnewsbycategory request
	Getnewsbycategory(ctx context.Context, category string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) UpdatenewsurlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatenewsurlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updatenewsurl(ctx context.Context, body UpdatenewsurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatenewsurlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Geturls(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGeturlsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getnewsbycategory(ctx context.Context, category string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetnewsbycategoryRequest(c.Server, category)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewUpdatenewsurlRequest calls the generic Updatenewsurl builder with application/json body
func NewUpdatenewsurlRequest(server string, body UpdatenewsurlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatenewsurlRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatenewsurlRequestWithBody generates requests for Updatenewsurl with any type of body
func NewUpdatenewsurlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/newsfeeder/v1/news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGeturlsRequest generates requests for Geturls
func NewGeturlsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/newsfeeder/v1/news/urls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetnewsbycategoryRequest generates requests for Getnewsbycategory
func NewGetnewsbycategoryRequest(server string, category string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "category", runtime.ParamLocationPath, category)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/newsfeeder/v1/news/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Updatenewsurl request with any body
	UpdatenewsurlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatenewsurlResponse, error)

	UpdatenewsurlWithResponse(ctx context.Context, body UpdatenewsurlJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatenewsurlResponse, error)

	// Geturls request
	GeturlsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeturlsResponse, error)

	// Getnewsbycategory request
	GetnewsbycategoryWithResponse(ctx context.Context, category string, reqEditors ...RequestEditorFn) (*GetnewsbycategoryResponse, error)
}

type UpdatenewsurlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatenewsurlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatenewsurlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GeturlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GeturlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GeturlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetnewsbycategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetnewsbycategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetnewsbycategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// UpdatenewsurlWithBodyWithResponse request with arbitrary body returning *UpdatenewsurlResponse
func (c *ClientWithResponses) UpdatenewsurlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatenewsurlResponse, error) {
	rsp, err := c.UpdatenewsurlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatenewsurlResponse(rsp)
}

func (c *ClientWithResponses) UpdatenewsurlWithResponse(ctx context.Context, body UpdatenewsurlJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatenewsurlResponse, error) {
	rsp, err := c.Updatenewsurl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatenewsurlResponse(rsp)
}

// GeturlsWithResponse request returning *GeturlsResponse
func (c *ClientWithResponses) GeturlsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GeturlsResponse, error) {
	rsp, err := c.Geturls(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGeturlsResponse(rsp)
}

// GetnewsbycategoryWithResponse request returning *GetnewsbycategoryResponse
func (c *ClientWithResponses) GetnewsbycategoryWithResponse(ctx context.Context, category string, reqEditors ...RequestEditorFn) (*GetnewsbycategoryResponse, error) {
	rsp, err := c.Getnewsbycategory(ctx, category, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetnewsbycategoryResponse(rsp)
}

// ParseUpdatenewsurlResponse parses an HTTP response from a UpdatenewsurlWithResponse call
func ParseUpdatenewsurlResponse(rsp *http.Response) (*UpdatenewsurlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatenewsurlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGeturlsResponse parses an HTTP response from a GeturlsWithResponse call
func ParseGeturlsResponse(rsp *http.Response) (*GeturlsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GeturlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetnewsbycategoryResponse parses an HTTP response from a GetnewsbycategoryWithResponse call
func ParseGetnewsbycategoryResponse(rsp *http.Response) (*GetnewsbycategoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetnewsbycategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// update news url against category
	// (PUT /api/newsfeeder/v1/news)
	Updatenewsurl(ctx echo.Context) error
	// Get news url for each category
	// (GET /api/newsfeeder/v1/news/urls)
	Geturls(ctx echo.Context) error
	// Get all news by category (uk/technology)
	// (GET /api/newsfeeder/v1/news/{category})
	Getnewsbycategory(ctx echo.Context, category string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Updatenewsurl converts echo context to params.
func (w *ServerInterfaceWrapper) Updatenewsurl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Updatenewsurl(ctx)
	return err
}

// Geturls converts echo context to params.
func (w *ServerInterfaceWrapper) Geturls(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Geturls(ctx)
	return err
}

// Getnewsbycategory converts echo context to params.
func (w *ServerInterfaceWrapper) Getnewsbycategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category" -------------
	var category string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category", runtime.ParamLocationPath, ctx.Param("category"), &category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Getnewsbycategory(ctx, category)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/api/newsfeeder/v1/news", wrapper.Updatenewsurl)
	router.GET(baseURL+"/api/newsfeeder/v1/news/urls", wrapper.Geturls)
	router.GET(baseURL+"/api/newsfeeder/v1/news/:category", wrapper.Getnewsbycategory)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yUzW7bMAzHX8XgaQOE2P3Yxbf1Uuw8DAhQ5MDYjK3WllSJ6mYYeveB8pymS/eBXQb0",
	"EkXkn6T4Y8IZGjs6a8hwgHqGQE30mqfPTU8jZdMNBt18jNxnf7ZDDXuxggKenFx7ZgcpJQXaHKwoWfMg",
	"HkNfw4GoBQVP5IO2Bmq42FSbCpIC68ig01DD1abaXIECh9znuiU6Xa7R5Muni3wTl4ssh3XkkbU1n1qo",
	"4YtrkUkk0Q+gwNNjpMA3tp1E3FjDZHIcOjfoJkeW90Ee9KMxlG/0DUcnT5+hQabO+glqiA+gQBLX+TMp",
	"cF7qs14oPUvnlUlgr00n0hx3Zk9HenZ/Tw0LvyTvDs6asKS9rCo5WgqN144XepdVVawqSX+93Z6Lrrfb",
	"F6IPfxYlBSGOIy4NZ5yF8CyiHwrsUJvAxbFRBYxdgPoujxh2Ev6LmZXRD7mdjl4Z3C1x9r/e+l/PTTON",
	"4QTzCvVIGb3HafmR/geet8TPMA/WF4RN/2805zUq/Y6pSPfTSYG3TheHYSG8n45ci3fxoWRqemMH203v",
	"zznLxvE4EpMX8wxaSskWAgUG87J7AfExak8t1OwjqRNCP/+78wjXfZozn2zSu13ape8BAAD//8+yUy19",
	"BQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

